# GitHub Actions CI/CD workflow for the Inviter Backend
# Version 5: Added secret debugging and fixed inconsistent deploy steps.
#
# This pipeline automates the building, testing, and deployment of the application
# to staging and production environments on AWS Elastic Beanstalk.
#
name: Backend CI/CD (v5)

on:
  # Triggers the workflow on push events to the "main" branch.
  push:
    branches: [ "main", "workflows" ]
  # Allows you to run this workflow manually from the Actions tab in GitHub.
  workflow_dispatch:

jobs:
  # =====================================================================================
  # BUILD JOB: Compiles the code, runs unit tests, and packages the application.
  # =====================================================================================
  build:
    name: Build and Package
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build with Gradle
        run: ./gradlew build

      - name: Prepare artifact for deployment
        run: cp build/libs/inviter-0.0.1-SNAPSHOT.jar application.jar

      - name: Upload deployment package
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: .

  # =====================================================================================
  # DEPLOY-STAGING JOB: Deploys the application to the staging environment.
  # =====================================================================================
  deploy-staging:
    name: Deploy to Staging
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: staging
    steps:
      - name: Download deployment package
        uses: actions/download-artifact@v4
        with:
          name: deployment-package
          path: .

      - name: Check for secrets
        run: |
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "AWS_ACCESS_KEY_ID is NOT set"
          else
            echo "AWS_ACCESS_KEY_ID is set"
          fi
          if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "AWS_SECRET_ACCESS_KEY is NOT set"
          else
            echo "AWS_SECRET_ACCESS_KEY is set"
          fi

      - name: Deploy to Elastic Beanstalk Staging
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ secrets.EB_APP_NAME_STAGING }}
          environment_name: ${{ secrets.EB_ENV_NAME_STAGING }}
          version_label: "v${{ github.run_number }}-${{ github.sha }}"
          region: ${{ secrets.AWS_REGION }}
          wait_for_environment_recovery: 60

      - name: Verify Staging Health Check
        run: |
          sleep 15 # Give the application a moment to start up
          curl -f ${{ secrets.STAGING_URL }}/health | grep '''{"status":"UP"}'''
          if [ $? -ne 0 ]; then
            echo "Staging health check failed."
            exit 1
          fi
          echo "Staging health check passed."

  # =====================================================================================
  # DEPLOY-PRODUCTION JOB: Deploys the application to the production environment.
  # =====================================================================================
  deploy-production:
    name: Deploy to Production
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment:
      name: production
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download deployment package
        uses: actions/download-artifact@v4
        with:
          name: deployment-package
          path: .

      - name: Deploy to Elastic Beanstalk Production
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ secrets.EB_APP_NAME_PROD }}
          environment_name: ${{ secrets.EB_ENV_NAME_PROD }}
          version_label: "v${{ github.run_number }}-${{ github.sha }}"
          region: ${{ secrets.AWS_REGION }}
          wait_for_environment_recovery: 60

      - name: Verify Production Health Check
        run: |
          sleep 15
          curl -f https://am6c8sp6kh.execute-api.us-west-2.amazonaws.com/prod/health | grep '''{"status":"UP"}'''
          if [ $? -ne 0 ]; then
            echo "Production health check failed."
            exit 1
          fi
          echo "Production health check passed."
